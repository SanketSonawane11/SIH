declare type SimpleValue<Type> = Type extends NumberConstructor ? number : Type extends StringConstructor ? string : Type extends BooleanConstructor ? boolean : SimplifyType<Type>;
declare type SimplifyType<Type> = Type extends [] ? [SimpleValue<any>] : {
    [Key in keyof Type]: SimpleValue<Type[Key]>;
};
declare type AsTypeFunction = <T extends {}>(returnType: T) => Promise<SimplifyType<T>>;
declare type TheApi = {
    [key: string]: (...args: any[]) => {
        AsType: AsTypeFunction;
    };
};
declare function TheApi(openAIKey: string): TheApi;
export default TheApi;
